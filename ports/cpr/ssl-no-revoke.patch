diff -Naur orig/cpr/session.cpp d81063f131-867dd8ed6e/cpr/session.cpp
--- orig/cpr/session.cpp	2021-02-08 10:46:37.833983600 +0100
+++ d81063f131-867dd8ed6e/cpr/session.cpp	2021-02-08 10:56:08.718354600 +0100
@@ -384,6 +384,11 @@
                                  | opts.max_version
 #endif
         );
+#if SUPPORT_SSL_NO_REVOKE
+        if (opts.ssl_no_revoke) {
+            curl_easy_setopt(curl, CURLOPT_SSL_OPTIONS, CURLSSLOPT_NO_REVOKE);
+        }
+#endif
         if (!opts.ca_info.empty()) {
             curl_easy_setopt(curl, CURLOPT_CAINFO, opts.ca_info.c_str());
         }
diff -Naur orig/include/cpr/ssl_options.h d81063f131-867dd8ed6e/include/cpr/ssl_options.h
--- orig/include/cpr/ssl_options.h	2020-10-20 15:24:44.000000000 +0200
+++ d81063f131-867dd8ed6e/include/cpr/ssl_options.h	2021-02-08 10:52:03.321423400 +0100
@@ -60,6 +60,9 @@
 #ifndef SUPPORT_SSL_FALSESTART
 #define SUPPORT_SSL_FALSESTART __LIBCURL_VERSION_GTE(7, 42)
 #endif
+#ifndef SUPPORT_SSL_NO_REVOKE
+#define SUPPORT_SSL_NO_REVOKE __LIBCURL_VERSION_GTE(7, 44)
+#endif
 
 namespace cpr {
 
@@ -325,6 +328,17 @@
 };
 #endif
 
+class NoRevoke {
+public:
+    NoRevoke(bool enabled) : enabled(enabled) {}
+
+    operator bool() const {
+        return enabled;
+    }
+
+    bool enabled = false;
+};
+
 } // namespace ssl
 
 struct SslOptions {
@@ -343,6 +357,9 @@
     bool verify_peer = true;
     bool verify_status = false;
     int ssl_version = CURL_SSLVERSION_DEFAULT;
+#if SUPPORT_SSL_NO_REVOKE
+    bool ssl_no_revoke = false;
+#endif
 #if SUPPORT_MAX_TLS_VERSION
     int max_version = CURL_SSLVERSION_MAX_DEFAULT;
 #endif
@@ -388,6 +405,11 @@
     void SetOption(const ssl::TLSv1& /*opt*/) {
         ssl_version = CURL_SSLVERSION_TLSv1;
     }
+#if SUPPORT_SSL_NO_REVOKE
+    void SetOption(const ssl::NoRevoke& opt) {
+        ssl_no_revoke = opt.enabled;
+    }
+#endif
 #if SUPPORT_SSLv2
     void SetOption(const ssl::SSLv2& /*opt*/) {
         ssl_version = CURL_SSLVERSION_SSLv2;
