diff -Naur a/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp b/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp
--- a/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp	2023-09-13 18:02:48.000000000 +0200
+++ b/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp	2023-10-12 09:58:27.179112600 +0200
@@ -194,9 +194,29 @@
     return result;
 }
 
+QWindowsOpenGLTester::Renderer QWindowsOpenGLTester::requestedGlesRenderer()
+{
+    const char platformVar[] = "QT_ANGLE_PLATFORM";
+    if (qEnvironmentVariableIsSet(platformVar)) {
+        const QByteArray anglePlatform = qgetenv(platformVar);
+        if (anglePlatform == "d3d11")
+            return QWindowsOpenGLTester::AngleRendererD3d11;
+        if (anglePlatform == "d3d9")
+            return QWindowsOpenGLTester::AngleRendererD3d9;
+        if (anglePlatform == "warp")
+            return QWindowsOpenGLTester::AngleRendererD3d11Warp;
+        qCWarning(lcQpaGl) << "Invalid value set for " << platformVar << ": " << anglePlatform;
+    }
+    return QWindowsOpenGLTester::InvalidRenderer;
+}
+
 QWindowsOpenGLTester::Renderer QWindowsOpenGLTester::requestedRenderer()
 {
     const char openGlVar[] = "QT_OPENGL";
+    if (QCoreApplication::testAttribute(Qt::AA_UseOpenGLES)) {
+        const Renderer glesRenderer = QWindowsOpenGLTester::requestedGlesRenderer();
+        return glesRenderer != InvalidRenderer ? glesRenderer : Gles;
+    }    
     if (QCoreApplication::testAttribute(Qt::AA_UseOpenGLES))
         qWarning("Qt::AA_UseOpenGLES is no longer supported in Qt 6");
     if (QCoreApplication::testAttribute(Qt::AA_UseDesktopOpenGL))
@@ -250,7 +270,10 @@
     if (it != srCache->cend())
         return *it;
 
-    QWindowsOpenGLTester::Renderers result(QWindowsOpenGLTester::SoftwareRasterizer);
+    QWindowsOpenGLTester::Renderers result(QWindowsOpenGLTester::AngleRendererD3d11
+        | QWindowsOpenGLTester::AngleRendererD3d9
+        | QWindowsOpenGLTester::AngleRendererD3d11Warp
+        | QWindowsOpenGLTester::SoftwareRasterizer);
 
     // Don't test for GL if explicitly requested or GLES only is requested
     if (requested == DesktopGl || testDesktopGL())
@@ -273,6 +296,19 @@
         qCDebug(lcQpaGl) << "Disabling Desktop GL: " << gpu;
         result &= ~QWindowsOpenGLTester::DesktopGl;
     }
+    if (features.contains(QStringLiteral("disable_angle"))) { // Qt-specific keyword
+        qCDebug(lcQpaGl) << "Disabling ANGLE: " << gpu;
+        result &= ~QWindowsOpenGLTester::GlesMask;
+    } else {
+        if (features.contains(QStringLiteral("disable_d3d11"))) { // standard keyword
+            qCDebug(lcQpaGl) << "Disabling D3D11: " << gpu;
+            result &= ~QWindowsOpenGLTester::AngleRendererD3d11;
+        }
+        if (features.contains(QStringLiteral("disable_d3d9"))) { // Qt-specific
+            qCDebug(lcQpaGl) << "Disabling D3D9: " << gpu;
+            result &= ~QWindowsOpenGLTester::AngleRendererD3d9;
+        }
+    }
     if (features.contains(QStringLiteral("disable_rotation"))) {
         qCDebug(lcQpaGl) << "Disabling rotation: " << gpu;
         result |= DisableRotationFlag;
diff -Naur a/qtbase/src/plugins/platforms/windows/qwindowsopengltester.h b/qtbase/src/plugins/platforms/windows/qwindowsopengltester.h
--- a/qtbase/src/plugins/platforms/windows/qwindowsopengltester.h	2023-09-13 18:02:48.000000000 +0200
+++ b/qtbase/src/plugins/platforms/windows/qwindowsopengltester.h	2023-10-12 09:58:49.622611200 +0200
@@ -41,6 +41,12 @@
     enum Renderer {
         InvalidRenderer         = 0x0000,
         DesktopGl               = 0x0001,
+        AngleRendererD3d11      = 0x0002,
+        AngleRendererD3d9       = 0x0004,
+        AngleRendererD3d11Warp  = 0x0008, // "Windows Advanced Rasterization Platform"
+        AngleBackendMask        = AngleRendererD3d11 | AngleRendererD3d9 | AngleRendererD3d11Warp,
+        Gles                    = 0x0010, // ANGLE/unspecified or Generic GLES for Windows CE.
+        GlesMask                = Gles | AngleBackendMask,        
         SoftwareRasterizer      = 0x0020,
         RendererMask            = 0x00FF,
         DisableRotationFlag     = 0x0100,
@@ -50,6 +56,7 @@
 
     static Renderer requestedRenderer();
 
+    static Renderer requestedGlesRenderer();
     static QWindowsOpenGLTester::Renderers  supportedRenderers(Renderer requested);
 
 private:
