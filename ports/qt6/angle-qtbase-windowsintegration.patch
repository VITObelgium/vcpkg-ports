diff -Naur a/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp b/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp
--- a/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp	2023-09-13 18:02:48.000000000 +0200
+++ b/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp	2023-10-12 09:50:58.593773400 +0200
@@ -55,7 +55,10 @@
 
 #include <limits.h>
 
-#if !defined(QT_NO_OPENGL)
+#if QT_CONFIG(opengles2) || defined(QT_OPENGL_DYNAMIC)
+#  include "qwindowseglcontext.h"
+#endif
+#if !defined(QT_NO_OPENGL) && !QT_CONFIG(opengles2)
 #  include "qwindowsglcontext.h"
 #endif
 
@@ -406,6 +409,15 @@
         }
         qCWarning(lcQpaGl, "System OpenGL failed. Falling back to Software OpenGL.");
         return QOpenGLStaticContext::create(true);
+#if QT_CONFIG(opengles2)
+    // If ANGLE is requested, use it, don't try anything else.
+    case QWindowsOpenGLTester::AngleRendererD3d9:
+    case QWindowsOpenGLTester::AngleRendererD3d11:
+    case QWindowsOpenGLTester::AngleRendererD3d11Warp:
+        return QWindowsEGLStaticContext::create(requestedRenderer);
+    case QWindowsOpenGLTester::Gles:
+        return QWindowsEGLStaticContext::create(requestedRenderer);
+#endif
     case QWindowsOpenGLTester::SoftwareRasterizer:
         if (QWindowsStaticOpenGLContext *swCtx = QOpenGLStaticContext::create(true))
             return swCtx;
@@ -432,6 +444,11 @@
         }
     }
     return QOpenGLStaticContext::create(true);
+#elif QT_CONFIG(opengles2)
+    QWindowsOpenGLTester::Renderers glesRenderers = QWindowsOpenGLTester::requestedGlesRenderer();
+    if (glesRenderers == QWindowsOpenGLTester::InvalidRenderer)
+        glesRenderers = QWindowsOpenGLTester::supportedRenderers(QWindowsOpenGLTester::AngleRendererD3d11);
+    return QWindowsEGLStaticContext::create(glesRenderers);
 #else
     return QOpenGLStaticContext::create();
 #endif
@@ -455,7 +472,9 @@
 
 QOpenGLContext::OpenGLModuleType QWindowsIntegration::openGLModuleType()
 {
-#if !defined(QT_OPENGL_DYNAMIC)
+#if defined(QT_OPENGL_ES_2)
+    return QOpenGLContext::LibGLES;
+#elif !defined(QT_OPENGL_DYNAMIC)
     return QOpenGLContext::LibGL;
 #else
     if (const QWindowsStaticOpenGLContext *staticOpenGLContext = QWindowsIntegration::staticOpenGLContext())
