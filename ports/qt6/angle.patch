diff -Naur a/qtbase/cmake/3rdparty/extra-cmake-modules/find-modules/FindEGL.cmake b/qtbase/cmake/3rdparty/extra-cmake-modules/find-modules/FindEGL.cmake
--- a/qtbase/cmake/3rdparty/extra-cmake-modules/find-modules/FindEGL.cmake	2023-09-21 21:24:26.000000000 +0200
+++ b/qtbase/cmake/3rdparty/extra-cmake-modules/find-modules/FindEGL.cmake	2023-10-09 21:45:10.642064100 +0200
@@ -64,6 +64,30 @@
 include(CheckCXXSourceCompiles)
 include(CMakePushCheckState)
 
+if (WIN32)
+    find_package(unofficial-angle CONFIG)
+    if(TARGET unofficial::angle::libEGL)
+        set(EGL_FOUND TRUE)
+        if (NOT TARGET EGL::EGL)
+            get_target_property(EGL_LIB_DEB unofficial::angle::libEGL IMPORTED_LOCATION_DEBUG)
+            get_target_property(EGL_LIB_REL unofficial::angle::libEGL IMPORTED_LOCATION_RELEASE)
+            get_target_property(EGL_DEFINITIONS unofficial::angle::libEGL INTERFACE_COMPILE_DEFINITIONS)
+            get_target_property(EGL_INCLUDE_DIR unofficial::angle::libEGL INTERFACE_INCLUDE_DIRECTORIES)
+            get_target_property(EGL_LINK_LIBRARIES unofficial::angle::libEGL INTERFACE_LINK_LIBRARIES)
+            get_target_property(ANGLE_DEFINITIONS unofficial::angle::libANGLE INTERFACE_COMPILE_DEFINITIONS)
+            
+            add_library(EGL::EGL UNKNOWN IMPORTED)
+            set_target_properties(EGL::EGL PROPERTIES
+                IMPORTED_LOCATION_RELEASE "${EGL_LIB_REL}"
+                IMPORTED_LOCATION_DEBUG "${EGL_LIB_DEB}"
+                INTERFACE_LINK_LIBRARIES "${EGL_LINK_LIBRARIES}"
+                INTERFACE_COMPILE_DEFINITIONS "${EGL_DEFINITIONS};${ANGLE_DEFINITIONS}"
+                INTERFACE_INCLUDE_DIRECTORIES "${EGL_INCLUDE_DIR}"
+            )
+        endif()
+    endif()
+else ()
+
 ecm_find_package_version_check(EGL)
 
 # Use pkg-config to get the directories and then use these values
@@ -170,6 +194,7 @@
 set(EGL_LIBRARIES ${EGL_LIBRARY})
 set(EGL_INCLUDE_DIRS ${EGL_INCLUDE_DIR})
 set(EGL_VERSION_STRING ${EGL_VERSION})
+endif()
 
 include(FeatureSummary)
 set_package_properties(EGL PROPERTIES
diff -Naur a/qtbase/src/gui/CMakeLists.txt b/qtbase/src/gui/CMakeLists.txt
--- a/qtbase/src/gui/CMakeLists.txt	2023-09-21 21:24:26.000000000 +0200
+++ b/qtbase/src/gui/CMakeLists.txt	2023-10-09 21:45:49.645276100 +0200
@@ -333,8 +333,13 @@
 # available until the qt_internal_add_module call.
 if(QT_FEATURE_opengl)
     if(QT_FEATURE_opengles2)
-        find_package(GLESv2)
-        target_link_libraries(Gui PUBLIC GLESv2::GLESv2)
+        if(WIN32)
+            find_package(unofficial-angle CONFIG REQUIRED)
+            target_link_libraries(Gui PUBLIC unofficial::angle::libEGL unofficial::angle::libGLESv2)
+        else()
+            find_package(GLESv2)
+            target_link_libraries(Gui PUBLIC GLESv2::GLESv2)
+        endif()
 
         if(INTEGRITY AND _qt_igy_gui_libs)
             find_package(IntegrityPlatformGraphics)
diff -Naur a/qtbase/src/gui/configure.cmake b/qtbase/src/gui/configure.cmake
--- a/qtbase/src/gui/configure.cmake	2023-09-21 21:24:26.000000000 +0200
+++ b/qtbase/src/gui/configure.cmake	2023-10-09 21:46:41.329734100 +0200
@@ -55,7 +55,14 @@
 endif()
 qt_find_package(Mtdev PROVIDED_TARGETS PkgConfig::Mtdev MODULE_NAME gui QMAKE_LIB mtdev)
 qt_find_package(WrapOpenGL PROVIDED_TARGETS WrapOpenGL::WrapOpenGL MODULE_NAME gui QMAKE_LIB opengl)
-qt_find_package(GLESv2 PROVIDED_TARGETS GLESv2::GLESv2 MODULE_NAME gui QMAKE_LIB opengl_es2)
+if(WIN32)
+    qt_find_package(unofficial-angle PROVIDED_TARGETS unofficial::angle::libEGL unofficial::angle::libGLESv2 MODULE_NAME gui QMAKE_LIB opengl_es2)
+    if (TARGET unofficial::angle::libGLESv2)
+        set(GLESv2_FOUND TRUE)
+    endif ()
+else()
+    qt_find_package(GLESv2 PROVIDED_TARGETS GLESv2::GLESv2 MODULE_NAME gui QMAKE_LIB opengl_es2)
+endif()
 qt_find_package(Tslib PROVIDED_TARGETS PkgConfig::Tslib MODULE_NAME gui QMAKE_LIB tslib)
 qt_find_package(WrapVulkanHeaders PROVIDED_TARGETS WrapVulkanHeaders::WrapVulkanHeaders MODULE_NAME gui QMAKE_LIB vulkan MARK_OPTIONAL) # special case
 if((LINUX) OR QT_FIND_ALL_PACKAGES_ALWAYS)
@@ -750,7 +757,7 @@
 )
 qt_feature("opengles2" PUBLIC
     LABEL "OpenGL ES 2.0"
-    CONDITION NOT WIN32 AND NOT WATCHOS AND NOT QT_FEATURE_opengl_desktop AND GLESv2_FOUND
+    CONDITION NOT WATCHOS AND NOT QT_FEATURE_opengl_desktop AND GLESv2_FOUND
     ENABLE INPUT_opengl STREQUAL 'es2'
     DISABLE INPUT_opengl STREQUAL 'desktop' OR INPUT_opengl STREQUAL 'dynamic' OR INPUT_opengl STREQUAL 'no'
 )
diff -Naur a/qtbase/src/opengl/CMakeLists.txt b/qtbase/src/opengl/CMakeLists.txt
--- a/qtbase/src/opengl/CMakeLists.txt	2023-09-21 21:24:26.000000000 +0200
+++ b/qtbase/src/opengl/CMakeLists.txt	2023-10-09 21:47:16.320804300 +0200
@@ -108,6 +108,8 @@
     SOURCES
         qopenglcompositor.cpp qopenglcompositor_p.h
         qopenglcompositorbackingstore.cpp qopenglcompositorbackingstore_p.h
+    LIBRARIES
+        EGL::EGL
 )
 
 qt_internal_generate_tracepoints(OpenGL opengl
diff -Naur a/qtbase/src/plugins/platforms/direct2d/CMakeLists.txt b/qtbase/src/plugins/platforms/direct2d/CMakeLists.txt
--- a/qtbase/src/plugins/platforms/direct2d/CMakeLists.txt	2023-09-21 21:24:26.000000000 +0200
+++ b/qtbase/src/plugins/platforms/direct2d/CMakeLists.txt	2023-10-09 21:48:15.779391800 +0200
@@ -100,7 +100,7 @@
 ## Scopes:
 #####################################################################
 
-qt_internal_extend_target(QWindowsDirect2DIntegrationPlugin CONDITION QT_FEATURE_opengl AND NOT QT_FEATURE_dynamicgl
+qt_internal_extend_target(QWindowsDirect2DIntegrationPlugin CONDITION QT_FEATURE_opengl AND NOT QT_FEATURE_dynamicgl AND NOT QT_FEATURE_opengles2
     LIBRARIES
         opengl32
 )
@@ -112,7 +112,7 @@
         ../windows/qwindowspointerhandler.cpp
 )
 
-qt_internal_extend_target(QWindowsDirect2DIntegrationPlugin CONDITION QT_FEATURE_opengl
+qt_internal_extend_target(QWindowsDirect2DIntegrationPlugin CONDITION QT_FEATURE_opengl AND QT_FEATURE_opengl_desktop
     SOURCES
         ../windows/qwindowsglcontext.cpp ../windows/qwindowsglcontext.h
         ../windows/qwindowsopenglcontext.h
diff -Naur a/qtbase/src/plugins/platforms/windows/CMakeLists.txt b/qtbase/src/plugins/platforms/windows/CMakeLists.txt
--- a/qtbase/src/plugins/platforms/windows/CMakeLists.txt	2023-09-21 21:24:26.000000000 +0200
+++ b/qtbase/src/plugins/platforms/windows/CMakeLists.txt	2023-10-09 21:49:28.354723600 +0200
@@ -87,7 +87,7 @@
 ## Scopes:
 #####################################################################
 
-qt_internal_extend_target(QWindowsIntegrationPlugin CONDITION QT_FEATURE_opengl
+qt_internal_extend_target(QWindowsIntegrationPlugin CONDITION QT_FEATURE_opengl AND NOT QT_FEATURE_opengles2
     SOURCES
         qwindowsglcontext.cpp qwindowsglcontext.h
         qwindowsopenglcontext.h
@@ -95,7 +95,15 @@
         Qt::OpenGLPrivate
 )
 
-qt_internal_extend_target(QWindowsIntegrationPlugin CONDITION QT_FEATURE_opengl AND NOT QT_FEATURE_dynamicgl
+qt_internal_extend_target(QWindowsIntegrationPlugin CONDITION QT_FEATURE_opengl AND QT_FEATURE_opengles2
+    SOURCES
+        qwindowseglcontext.cpp qwindowseglcontext.h
+    LIBRARIES
+        Qt::OpenGLPrivate
+        EGL::EGL
+)
+
+qt_internal_extend_target(QWindowsIntegrationPlugin CONDITION QT_FEATURE_opengl AND NOT QT_FEATURE_dynamicgl AND NOT QT_FEATURE_opengles2
     LIBRARIES
         opengl32
 )
diff -Naur a/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp b/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp
--- a/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp	2023-09-21 21:24:26.000000000 +0200
+++ b/qtbase/src/plugins/platforms/windows/qwindowsintegration.cpp	2023-10-09 21:53:11.726341800 +0200
@@ -55,7 +55,10 @@
 
 #include <limits.h>
 
-#if !defined(QT_NO_OPENGL)
+#if QT_CONFIG(opengles2) || defined(QT_OPENGL_DYNAMIC)
+#  include "qwindowseglcontext.h"
+#endif
+#if !defined(QT_NO_OPENGL) && !QT_CONFIG(opengles2)
 #  include "qwindowsglcontext.h"
 #endif
 
@@ -122,7 +125,7 @@
     QWindowsDrag m_drag;
 #  endif
 #endif
-#ifndef QT_NO_OPENGL
+#if !defined(QT_NO_OPENGL)
     QMutex m_staticContextLock;
     QScopedPointer<QWindowsStaticOpenGLContext> m_staticOpenGLContext;
 #endif // QT_NO_OPENGL
@@ -418,6 +421,15 @@
         }
         qCWarning(lcQpaGl, "System OpenGL failed. Falling back to Software OpenGL.");
         return QOpenGLStaticContext::create(true);
+#if QT_CONFIG(opengles2)
+    // If ANGLE is requested, use it, don't try anything else.
+    case QWindowsOpenGLTester::AngleRendererD3d9:
+    case QWindowsOpenGLTester::AngleRendererD3d11:
+    case QWindowsOpenGLTester::AngleRendererD3d11Warp:
+        return QWindowsEGLStaticContext::create(requestedRenderer);
+    case QWindowsOpenGLTester::Gles:
+        return QWindowsEGLStaticContext::create(requestedRenderer);
+#endif
     case QWindowsOpenGLTester::SoftwareRasterizer:
         if (QWindowsStaticOpenGLContext *swCtx = QOpenGLStaticContext::create(true))
             return swCtx;
@@ -444,6 +456,11 @@
         }
     }
     return QOpenGLStaticContext::create(true);
+#elif QT_CONFIG(opengles2)
+    QWindowsOpenGLTester::Renderers glesRenderers = QWindowsOpenGLTester::requestedGlesRenderer();
+    if (glesRenderers == QWindowsOpenGLTester::InvalidRenderer)
+        glesRenderers = QWindowsOpenGLTester::supportedRenderers(QWindowsOpenGLTester::AngleRendererD3d11);
+    return QWindowsEGLStaticContext::create(glesRenderers);
 #else
     return QOpenGLStaticContext::create();
 #endif
@@ -467,7 +484,9 @@
 
 QOpenGLContext::OpenGLModuleType QWindowsIntegration::openGLModuleType()
 {
-#if !defined(QT_OPENGL_DYNAMIC)
+#if defined(QT_OPENGL_ES_2)
+    return QOpenGLContext::LibGLES;
+#elif !defined(QT_OPENGL_DYNAMIC)
     return QOpenGLContext::LibGL;
 #else
     if (const QWindowsStaticOpenGLContext *staticOpenGLContext = QWindowsIntegration::staticOpenGLContext())
diff -Naur a/qtbase/src/plugins/platforms/windows/qwindowsnativeinterface.cpp b/qtbase/src/plugins/platforms/windows/qwindowsnativeinterface.cpp
--- a/qtbase/src/plugins/platforms/windows/qwindowsnativeinterface.cpp	2023-09-21 21:24:26.000000000 +0200
+++ b/qtbase/src/plugins/platforms/windows/qwindowsnativeinterface.cpp	2023-10-09 21:55:42.208640600 +0200
@@ -20,6 +20,9 @@
 
 enum ResourceType {
     RenderingContextType,
+    EglContextType,
+    EglDisplayType,
+    EglConfigType,
     HandleType,
     GlHandleType,
     GetDCType,
@@ -31,6 +34,9 @@
 {
     static const char *names[] = { // match ResourceType
         "renderingcontext",
+        "eglcontext",
+        "egldisplay",
+        "eglconfig",
         "handle",
         "glhandle",
         "getdc",
@@ -127,6 +133,19 @@
         return nullptr;
     }
 
+    auto *glcontext = static_cast<QWindowsOpenGLContext *>(context->handle());
+    switch (resourceType(resource)) {
+    case RenderingContextType: // Fall through.
+    // case EglContextType:
+    //     return glcontext->nativeContext();
+    case EglDisplayType:
+        return glcontext->nativeDisplay();
+    case EglConfigType:
+        return glcontext->nativeConfig();
+    default:
+        break;
+    }
+
     qWarning("%s: Invalid key '%s' requested.", __FUNCTION__, resource.constData());
     return nullptr;
 }
diff -Naur a/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp b/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp
--- a/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp	2023-09-21 21:24:26.000000000 +0200
+++ b/qtbase/src/plugins/platforms/windows/qwindowsopengltester.cpp	2023-10-09 21:56:58.388991200 +0200
@@ -194,9 +194,29 @@
     return result;
 }
 
+QWindowsOpenGLTester::Renderer QWindowsOpenGLTester::requestedGlesRenderer()
+{
+    const char platformVar[] = "QT_ANGLE_PLATFORM";
+    if (qEnvironmentVariableIsSet(platformVar)) {
+        const QByteArray anglePlatform = qgetenv(platformVar);
+        if (anglePlatform == "d3d11")
+            return QWindowsOpenGLTester::AngleRendererD3d11;
+        if (anglePlatform == "d3d9")
+            return QWindowsOpenGLTester::AngleRendererD3d9;
+        if (anglePlatform == "warp")
+            return QWindowsOpenGLTester::AngleRendererD3d11Warp;
+        qCWarning(lcQpaGl) << "Invalid value set for " << platformVar << ": " << anglePlatform;
+    }
+    return QWindowsOpenGLTester::InvalidRenderer;
+}
+
 QWindowsOpenGLTester::Renderer QWindowsOpenGLTester::requestedRenderer()
 {
     const char openGlVar[] = "QT_OPENGL";
+    if (QCoreApplication::testAttribute(Qt::AA_UseOpenGLES)) {
+        const Renderer glesRenderer = QWindowsOpenGLTester::requestedGlesRenderer();
+        return glesRenderer != InvalidRenderer ? glesRenderer : Gles;
+    }
     if (QCoreApplication::testAttribute(Qt::AA_UseOpenGLES))
         qWarning("Qt::AA_UseOpenGLES is no longer supported in Qt 6");
     if (QCoreApplication::testAttribute(Qt::AA_UseDesktopOpenGL))
@@ -250,7 +270,10 @@
     if (it != srCache->cend())
         return *it;
 
-    QWindowsOpenGLTester::Renderers result(QWindowsOpenGLTester::SoftwareRasterizer);
+    QWindowsOpenGLTester::Renderers result(QWindowsOpenGLTester::AngleRendererD3d11
+        | QWindowsOpenGLTester::AngleRendererD3d9
+        | QWindowsOpenGLTester::AngleRendererD3d11Warp
+        | QWindowsOpenGLTester::SoftwareRasterizer);
 
     // Don't test for GL if explicitly requested or GLES only is requested
     if (requested == DesktopGl || testDesktopGL())
@@ -273,6 +296,19 @@
         qCDebug(lcQpaGl) << "Disabling Desktop GL: " << gpu;
         result &= ~QWindowsOpenGLTester::DesktopGl;
     }
+    if (features.contains(QStringLiteral("disable_angle"))) { // Qt-specific keyword
+        qCDebug(lcQpaGl) << "Disabling ANGLE: " << gpu;
+        result &= ~QWindowsOpenGLTester::GlesMask;
+    } else {
+        if (features.contains(QStringLiteral("disable_d3d11"))) { // standard keyword
+            qCDebug(lcQpaGl) << "Disabling D3D11: " << gpu;
+            result &= ~QWindowsOpenGLTester::AngleRendererD3d11;
+        }
+        if (features.contains(QStringLiteral("disable_d3d9"))) { // Qt-specific
+            qCDebug(lcQpaGl) << "Disabling D3D9: " << gpu;
+            result &= ~QWindowsOpenGLTester::AngleRendererD3d9;
+        }
+    }
     if (features.contains(QStringLiteral("disable_rotation"))) {
         qCDebug(lcQpaGl) << "Disabling rotation: " << gpu;
         result |= DisableRotationFlag;
diff -Naur a/qtbase/src/plugins/platforms/windows/qwindowsopengltester.h b/qtbase/src/plugins/platforms/windows/qwindowsopengltester.h
--- a/qtbase/src/plugins/platforms/windows/qwindowsopengltester.h	2023-09-21 21:24:26.000000000 +0200
+++ b/qtbase/src/plugins/platforms/windows/qwindowsopengltester.h	2023-10-09 21:57:21.200881800 +0200
@@ -41,6 +41,12 @@
     enum Renderer {
         InvalidRenderer         = 0x0000,
         DesktopGl               = 0x0001,
+        AngleRendererD3d11      = 0x0002,
+        AngleRendererD3d9       = 0x0004,
+        AngleRendererD3d11Warp  = 0x0008, // "Windows Advanced Rasterization Platform"
+        AngleBackendMask        = AngleRendererD3d11 | AngleRendererD3d9 | AngleRendererD3d11Warp,
+        Gles                    = 0x0010, // ANGLE/unspecified or Generic GLES for Windows CE.
+        GlesMask                = Gles | AngleBackendMask,
         SoftwareRasterizer      = 0x0020,
         RendererMask            = 0x00FF,
         DisableRotationFlag     = 0x0100,
@@ -48,6 +54,7 @@
     };
     Q_DECLARE_FLAGS(Renderers, Renderer)
 
+    static Renderer requestedGlesRenderer();
     static Renderer requestedRenderer();
 
     static QWindowsOpenGLTester::Renderers  supportedRenderers(Renderer requested);
